from rasa_sdk import Action
from rasa_sdk.events import SlotSet
import random

    
class ActionGreet(Action):
    def name(self):
        return "action_greet"

    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == "ru":
            dispatcher.utter_message(text="–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥–±–æ—Ä–∫—É –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∂–∏–∑–Ω–∏ –Ω–∞ –ö–∏–ø—Ä–µ!")
        if language == "en":
            dispatcher.utter_message(text="Hi there! üñê Here you can find a selection of important information for a comfortable start to life in Cyprus!")
        return [SlotSet("language", language)]
    
class ActionGreetSecond(Action):
    def name(self):
        return "action_greet_second"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–î–æ–∫—É–º–µ–Ω—Ç—ã Documents", "payload": "/section1"},
            {"title": "Set up your company", "payload": "/section2"},
            {"title": "Taxation", "payload": "/section3"}
        ]
                
        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_messages = [
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.",
                "–ö–ª–∏–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.",
                "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å."]
            dispatcher.utter_message(text=random.choice(follow_up_messages), buttons=buttons)
        if language == "en":
            follow_up_messages = [
                "Write your question or choose one of the sections.",
                "Click on the apropriate section or write a question.",
                "Choose one of the buttons or ask your question."]
            dispatcher.utter_message(text=random.choice(follow_up_messages), buttons=buttons)
            
        return [SlotSet("language", language)]
 
class ActionRandomGreeting(Action):
    def name(self):
        return "action_random_greeting"

    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == 'ru':
            follow_up_messages = ["–ü—Ä–∏–≤–µ—Ç!üñê", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!üñê"]
            dispatcher.utter_message(text=random.choice(follow_up_messages))
        if language == 'en':
            follow_up_messages = ["Hello!üñê"]
            dispatcher.utter_message(text=random.choice(follow_up_messages))

        return [SlotSet("language", language)]

class ActionHelp(Action):
    def name(self):
        return "action_help"
    
    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == "ru":
            dispatcher.utter_message(text="–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∂–∏–∑–Ω–∏ –Ω–∞ –ö–∏–ø—Ä–µ! –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        if language == "en":
            dispatcher.utter_message(text="I can provide you with userulinformation for life in Syprus! Choose one of the sections as get started or write your own question:")

        return [SlotSet("language", language)]

class ActionNoMatch(Action):
    def name(self):
        return "action_no_match"

    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_messages = [
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É.",
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.–ù–∞–ø–∏—à–∏ –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."]
            dispatcher.utter_message(text=random.choice(follow_up_messages))
        if language == "en":
            follow_up_messages = [
                "Unfortunately, I wasn't unable to understand your request. Try to phrase it differently.",
                "I didn't quite understand your request. Write it differently, please."]
            dispatcher.utter_message(text=random.choice(follow_up_messages))
        return [SlotSet("language", language)]
    
class ActionThanks(Action):
    def name(self):
        return "action_thanks"

    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_messages_1 = [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!",
                "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"]
            dispatcher.utter_message(text=random.choice(follow_up_messages_1))
            follow_up_messages_2 = [
                "–Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ –Ω–∏–±—É–¥—å –µ—â–µ.",
                "–Ø —Ç—É—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."]
            dispatcher.utter_message(text=random.choice(follow_up_messages_2))
        if language == "en":
            follow_up_messages_1 = [
                "You are welcome!",
                "Get in touch!"]
            dispatcher.utter_message(text=random.choice(follow_up_messages_1))
            follow_up_messages_2 = [
                "I'm always here if you want to know anything else.",
                "I'm here if you want to read more information."]
            dispatcher.utter_message(text=random.choice(follow_up_messages_2))
        return [SlotSet("language", language)]
    
class ActionDoc(Action):
    def name(self):
        return "action_doc"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–í–∏–∑—ã –¥–ª—è –≤—ä–µ–∑–¥–∞ / Visas for entry", "payload": "/section4"},
            {"title": "–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏ / Police clearance certitlicate", "payload": "/section5"},
            {"title": "–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ / Translation of documents", "payload": "/section6"},
            {"title": "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å / Another question", "payload": "/section7"}
        ]

        language = tracker.get_slot("language")
        if language == "ru":
            message = ("–î–ª—è —Ä–µ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –ö–∏–ø—Ä —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
                       "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –í–ù–ñ, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω. "
                       "–¢—É—Ç –µ—Å—Ç—å –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.")
            follow_up_messages = [
                "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", 
                "–ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", 
                "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏ —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"
            ]
        if language == "en":
            message = ("For relocation to Cyprus, you need to collect a package of documents. "
                       "The list of documents depends on the type of residence permit you need. "
                       "There is a summary and links to useful resources.")
            follow_up_messages = [
                "Click the button and find out more:", 
                "To read the information, click on one of the buttons:", 
                "Select the button and find out the details:"
            ]

        dispatcher.utter_message(text=message)
        dispatcher.utter_message(text=random.choice(follow_up_messages), buttons=buttons)
        return [SlotSet("language", language)]
    
class ActionDoc_Path1(Action):
    def name(self):
        return "action_doc_path1"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–ù–∞–∑–∞–¥ / Back", "payload": "/section8"},
            {"title": "–°–ø–∞—Å–∏–±–æ / Thanks", "payload": "/section9"}
        ]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("""\n –î–ª—è –≥—Ä–∞–∂–¥–∞–Ω —Å—Ç—Ä–∞–Ω –ï–≤—Ä–æ—Å–æ—é–∑–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –í–ù–ñ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–∞ –≤–∏–∑–∞ –¥–ª—è –≤—ä–µ–∑–¥–∞ –Ω–∞ –ö–∏–ø—Ä.
                                    \n –ì—Ä–∞–∂–¥–∞–Ω–µ —Ç—Ä–µ—Ç—å–∏—Ö —Å—Ç—Ä–∞–Ω –º–æ–≥—É—Ç –≤—ä–µ—Ö–∞—Ç—å –Ω–∞ –ö–∏–ø—Ä –ø–æ –®–µ–Ω–≥–µ–Ω—Å–∫–æ–π –≤–∏–∑–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏–≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–∏–∑—É –ö–∏–ø—Ä–∞.
                                    \n –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∏–∑–∞–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ –ö–∏–ø—Ä–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:
                                    \n http://www.moi.gov.cy/moi/crmd/crmd.nsf/home.en/homecnapenform#""")
        if language == "en":
            follow_up_message = ("""\n Citizens of EU countries and holders of residence permits of these countries don't need a visa to enter Cyprus.
                                    \n Third-country nationals can enter Cyprus with a Schengen visa or with a Cypriot national visa.
                                    \n To find complete information about visas and rules for staying in Cyprus, you can check the website of the Migration Department:
                                    \n http://www.moi.gov.cy/moi/crmd/crmd.nsf/home.en/homecnapenform#""")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]
    
class ActionDoc_Path1_2(Action):
    def name(self):
        return "action_doc_path1_2"

    def run(self, dispatcher, tracker, domain):
        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_messages = ["–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
                                  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", 
                                  "–û—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?"]
            dispatcher.utter_message(text=random.choice(follow_up_messages))
        if language == "en":
            follow_up_messages = ["Do you want to know something else?", 
                                  "Curious to know anything else?",
                                  "Do you have mare questions?"]
            dispatcher.utter_message(text=random.choice(follow_up_messages))
        return [SlotSet("language", language)]
    
class ActionDoc_Path2(Action):
    def name(self):
        return "action_doc_path2"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–ù–∞–∑–∞–¥ / Back", "payload": "/section8"},
            {"title": "–°–ø–∞—Å–∏–±–æ / Thanks", "payload": "/section9"}
        ]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("""–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –ö–∏–ø—Ä–µ
                                 \n –ü—Ä–æ–∂–∏–≤ –Ω–∞ –ö–∏–ø—Ä–µ –ø–æ–ª–≥–æ–¥–∞ –∏ –±–æ–ª–µ–µ, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∏–ø—Ä–∞–∫—É—é —Å–ø—Ä–∞–≤–∫—É –æ –Ω–µ—Å—É–¥–∏–º–æ—Å–∏.
                                 \n –°–ø—Ä–∞–≤–∫–∞ –≤—ã–¥–∞—ë—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–∏—Ü–∏–∏ –≤ –ù–∏–∫–æ—Å–∏–º –ø–æ –±—É–¥–Ω—è–º –¥–æ 15:00.
                                 \n –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ.
                                 \n –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ä–º—É
                                 \n –ê–¥—Ä–µ—Å: Cyprus Police Headquarters Nicosia 1478, Cyprus
                                 \n –¢–µ–ª–µ—Ñ–æ–Ω: +357 (22) 808944
                                 \n http:www.police.gov.cy
                                 \n –ü—Ä–∏ —Å–µ–±–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∫–æ–ø–∏–∏ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –†—ñnkSlip.""")
        if language == "en":
            follow_up_message = ("""Police clearance certificate in Cyprus
                                 \n Having lived in Cyprus for six months or more, you can get a Cypriat certificate of good conduct.
                                 \n The certificate is issued at the main police station in Nicosia on weekdays until 15:00.
                                 \n To receive a certificate, you must fill out and sign an application.
                                 \n Download form
                                 \n Address: Cyprus Police Haadquarters Nicosia 1478, Cyprus
                                 \n Phone: +357 (22) 808944
                                 \n http:www.police.gov.cy
                                 \n You need to have copies and originals of your passport and PinkSlip with you.""")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]
    
class ActionDoc_Path3(Action):
    def name(self):
        return "action_doc_path3"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–ù–∞–∑–∞–¥ / Back", "payload": "/section8"},
            {"title": "–°–ø–∞—Å–∏–±–æ / Thanks", "payload": "/section9"}
        ]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("""–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–µ—Å—Ç—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –Ω–∞ –ö–∏–ø—Ä–µ: https://www.pie.gov.sy/enregister-ofeworn-cranslators.html""")
        if language == "en":
            follow_up_message = ("""If you need to translate documents, you can find a certified translator in the registry: https://www.pie.gov.sy/enregister-ofeworn-cranslators.html""")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]
    
class ActionDoc_Path4(Action):
    def name(self):
        return "action_doc_path4"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–ù–∞–∑–∞–¥ / Back", "payload": "/section8"},
            {"title": "–°–ø–∞—Å–∏–±–æ / Thanks", "payload": "/section9"}
        ]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?")
        if language == "en":
            follow_up_message = ("What do you want to know?")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]

class ActionCompany_Path(Action):
    def name(self):
        return "action_doc_company"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–¢–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π / Main types of companies", "payload": "/section10"},
            {"title": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é / How to register a company in Cyprus", "payload": "/section11"},
            {"title": "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø–ª–∞—Ç–µ–∂–∏ / Obligations and payments (Fees)", "payload": "/section12"},
            {"title": "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å / Another question", "payload": "/section13"}]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("–ó–¥–µ—Å—å –±—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–∞–∫ –æ—Ç–∫—Ä—ã-—Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ –ö–∏–ø—Ä–µ.")
        if language == "en":
            follow_up_message = ("Here you can find basic information on starting your company in Cyprus.")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]
    
class ActionCompany_Path2(Action):
    def name(self):
        return "action_doc_company2"

    def run(self, dispatcher, tracker, domain):

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: ¬´–¢–µ–º–∞¬ª")
        if language == "en":
            follow_up_message = ("Your topic: ¬´Topic¬ª")

        dispatcher.utter_message(text=follow_up_message)
        return [SlotSet("language", language)]
    
class ActionTax_Path(Action):
    def name(self):
        return "action_doc_tax"

    def run(self, dispatcher, tracker, domain):
        buttons = [
            {"title": "–°—Ç–∞—Ç—å –Ω–∞–ª–æ–≥–æ–≤—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –ö–∏–ø—Ä–∞ / How to become a tax resident in Cyprus", "payload": "/section14"},
            {"title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è / Tax calculator", "payload": "/section15"},
            {"title": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ / Individual taxation", "payload": "/section16"},
            {"title": "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å / Another question", "payload": "/section17"}]

        language = tracker.get_slot("language")
        if language == "ru":
            follow_up_message = ("–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–µ–∑–¥–µ –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É. –ú—ã —Å–æ–±—Ä–∞–ª–∏ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ.")
        if language == "en":
            follow_up_message = ("Understanding taxes is very important when you arrive in a new country. Here is the starting information for you.")

        dispatcher.utter_message(text=follow_up_message, buttons=buttons)
        return [SlotSet("language", language)]